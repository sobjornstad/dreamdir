#!/usr/bin/env bats
# vim:set filetype=sh:

setup() {
    if [ ! -f ./tests/test_dreamdir/.dreamdir ]; then
        echo "Please run tests from the project root."
        exit
    fi
    cd ./tests/test_dreamdir
}


MESSAGE_EXTRACTOR_AWK=$(cat <<AWKSCRIPT
BEGIN {
    doPrint = 0;
    skip = 2;
}

/FN_NAME\(\) {/ { doPrint = 1; }
/^USAGEMSG$/ { if (doPrint) exit; }

{
    if (doPrint) {
        if (skip > 0) skip--;
        else print \$0;
    }
}
AWKSCRIPT
)
helptest() {
    run $1
    local awkcode=$(echo "$MESSAGE_EXTRACTOR_AWK" | sed -e "s/FN_NAME/$2/")
    local result=$(awk "$awkcode" < dr | sed -e 's/`basename $0`/dr/' | sed -e 's/\\\\/\\/g' | sed -e 's/\\\$/$/g')
    diff <(echo "$result") <(echo "$output")
    [ "$status" == 0 ]
    [ "$output" == "$result" ]
}
@test "dr - help messages" {
    # The helptest function extracts the actual help text from the script, so
    # it should not go out of date unless the format of the heredocs changes.
    helptest "dr" "usagemsg"
    helptest "dr help" "usagemsg"
    helptest "dr help search" "usagemsg_edit"
    helptest "dr help header-replace" "usagemsg_header_replace"
    helptest "dr h" "usagemsg"
    helptest "dr h search" "usagemsg_edit"
    helptest "dr h header-replace" "usagemsg_header_replace"
    helptest "dr h s" "usagemsg_edit"
}

@test "dr new - create new dream file" {
	EDITOR='cat' run dr new
	expected=$(cat <<-EXPECTED
	Id:	00010
	Date:	$(date '+%Y-%m-%d')
	Time:	
	Tags:	
	

	Deleting unmodified dream file.
	EXPECTED)
	[ "$status" == 0 ]
	[ "$output" == "$expected" ]
}

@test "dr cat - print dream on stdout" {
    run dr cat 4
    expected=$(echo -e "$(cat 00004.dre)\n\n")
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]

    run dr cat 0000[48]
    # 3x '\n': bash seems to automatically strip one of them
    expected=$(echo -e "$(cat 00004.dre)\n\n\n$(cat 00008.dre)\n\n")
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]
}

@test "dr dump-headers - print dream headers on stdout" {
    run dr dump-headers 0000[48]
	expected=$(cat <<-EXPECTED
	Id:	00004
	Date:	2011-05-06
	People:	Q
	Places:	Sunnyside
	Tags:	sex
	
	Id:	00008
	Date:	2011-05-08
	People:	M
	Tags:	foo, bar baz, foobar
	
	EXPECTED)
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]
}

@test "dr edit - edit existing dream file" {
    # try making a small change with 'ed'
    cp 00005.dre save.dre
    echo -e "4\ni\npq\n.\nwq\n" | EDITOR='ed' dr edit 5
    run diff 00005.dre save.dre 
    mv save.dre 00005.dre
    expected=$(echo -e "4d3\n< pq")
    [ "$status" == 1 ]
    [ "$output" == "$expected" ]
}

fn_test() {
    local desiredResult="$1"
    shift
    run dr find "$@"
    fn_check "$desiredResult" "$output"
}
fn_check() {
    local desiredResult="$1"
    local output="$2"
    local numMatches=$(echo "$desiredResult" | wc -w)
    if [ "$desiredResult" == "NOMATCH" ]
    then local match="No results."
    else local match="$numMatches matches: [$desiredResult]" 
    fi

    # Replace backspaced characters in output with nothing, test, and
    # print debug information if failure.
    if [ "$(echo $output | sed -e 's/.//')" != "$match" ]; then
        echo -e "Output:\t$output"
        echo -e "Expected:\t$match"
        false
    fi
}
@test "dr find tagged - extensive find testing" {
    # hregexes should match / not match on dream #8 as noted in the help page
    fn_test "8"     t Tags 'foo'
    fn_test "8"     t Tags 'bar'
    fn_test "8"     t Tags 'baz'
    fn_test "8"     t Tags 'az'
    fn_test "8"     t Tags '.*baz'
    fn_test "8"     t Tags '^ba.*az'
    fn_test "8"     t Tags '^foobar$'
    fn_test NOMATCH t Tags '^baz$'
    fn_test NOMATCH t Tags 'o, ba'
    fn_test NOMATCH t Tags 'foo.*baz'

    # some additional hregex tests
    fn_test "4, 7"    t Tags   'sex'         
    fn_test "7"       t Tags   'sexy'        
    fn_test "4"       t Tags   '^sex$'       
    fn_test "4"       t Tags   '\bsex\b'     
    fn_test "1"       t People 'Einstein'    
    fn_test "1"       t People 'Alb.*stein'
    fn_test "1, 4, 5" t Places 'Sunnyside'   
    fn_test "9"       t Lucid  1              

    # how about combinations of tests?
    fn_test "7, 6, 7" tagged Tags 'rel.*ship' tagged People OC

    # winnow / piping
    result=$(dr find $(dr filename-display tagged Tags 'rel.*ship' | dr winnow tagged People OC))
    fn_check "7" "$result"
    result=$(dr find $(dr filename-display tagged Tags 'rel.*ship' | dr xwinnow tagged People OC))
    fn_check "6" "$result"
}

@test "dr find glob - test of shell globbing patterns with find" {
    # normal
    fn_test "1, 2, 3, 4, 5" '0000[12345]'
    fn_test "1, 2, 3, 4, 5" '0000[1-5]'
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" '0000*'
    # if we forget to quote...
    fn_test "1, 2, 3, 4, 5" 0000[12345]
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" 0000*
    # and how about with the extension
    fn_test "1, 2, 3, 4, 5" '0000[12345].dre'
    fn_test "1, 2, 3, 4, 5" 0000[12345].dre
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" '0000*.dre'
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" 0000*.dre
    # and something wacky
    fn_test "1, 2" '[025]*0[12]'
    fn_test "1, 2" [025]*0[12].dre
    fn_test "1, 2" [025]*0[12]

    # NOMATCH doesn't work since we have a different error message condition
    # || true: this returns 1 and BATS will get mad if anything returns nonzero
    result=$(dr find '[025]*[12]0') || true
    expected=$(cat <<-EXPECTED
	Matched nonexistent file '[025]*[12]0.dre'; please check your search terms and try again.
	(Type 'dr help search' for help.)
	EXPECTED)
    [ "$result" == "$expected" ]
}

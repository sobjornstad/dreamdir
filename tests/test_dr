#!/usr/bin/env bats
# vim:set filetype=sh:set noexpandtab:
setup() {
    if [ ! -f ./tests/test_dreamdir/.dreamdir ]; then
        echo "Please run tests from the project root."
        exit
    fi
    cd ./tests/test_dreamdir
}


##### UTILITIES #####
MESSAGE_EXTRACTOR_AWK=$(cat <<AWKSCRIPT
BEGIN {
    doPrint = 0;
    skip = 2;
}

/FN_NAME\(\) {/ { doPrint = 1; }
/^USAGEMSG$/ { if (doPrint) exit; }

{
    if (doPrint) {
        if (skip > 0) skip--;
        else print \$0;
    }
}
AWKSCRIPT
)

helptest() {
    run $1
    local awkcode=$(echo "$MESSAGE_EXTRACTOR_AWK" | sed -e "s/FN_NAME/$2/")
    local result=$(awk "$awkcode" < dr | sed -e 's/$(basename "$0")/dr/' | sed -e 's/\\\\/\\/g' | sed -e 's/\\\$/$/g')
    diff <(echo "$result") <(echo "$output")
    [ "$status" == 0 ]
    [ "$output" == "$result" ]
}

@test "dr help - help & usage messages" {
    # The helptest function extracts the actual help text from the script, so
    # it should not go out of date unless the format of the heredocs changes.
    helptest "dr" "usagemsg"
    helptest "dr help" "usagemsg"
    helptest "dr help search" "usagemsg_edit"
    helptest "dr help header-replace" "usagemsg_header_replace"
    helptest "dr h" "usagemsg"
    helptest "dr h search" "usagemsg_edit"
    helptest "dr h header-replace" "usagemsg_header_replace"
    helptest "dr h s" "usagemsg_edit"
}

@test "dr new - create new dream file" {
	expected=$(cat <<-EXPECTED
	Id:	00010
	Date:	$(date '+%Y-%m-%d')
	Time:	
	Tags:	
	

	Deleting unmodified dream file.
	EXPECTED)
	EDITOR='cat' run dr new
	[ "$status" == 0 ]
	[ "$output" == "$expected" ]
	EDITOR='cat' run dr n
	[ "$status" == 0 ]
	[ "$output" == "$expected" ]
}

@test "dr version - display the version number" {
	expected_ver=$(grep "^MYVERSION=" dr | sed -e 's/MYVERSION="\(.*\)"/\1/')
	run dr version
	[ "$output" == "dr version $expected_ver" ]
	run dr v
	[ "$output" == "dr version $expected_ver" ]
}

@test "dr last-lucid - legacy way to edit the last lucid dream" {
	EDITOR=cat run dr last-lucid
	[ "${lines[0]}" == "Id:	00009" ]
	EDITOR=cat run dr ll
	[ "${lines[0]}" == "Id:	00009" ]
}

# Still to test: header-replace, regenerate-graphs, stats, validate


##### SEARCHES #####
# First we test all search expressions using 'find'. Then, having confirmed
# that search expressions work properly, we try the other actions.

# Utility function to easily check the result of a search expression, and
# display useful debugging information if it fails.
#
# Arguments:
# $1 - a comma-and-space-separated list of dreams you expect the expr to match
# (variable) - the search expression to test
fn_test() {
    local desiredResult="$1"
    shift
    run dr find "$@"
    fn_check "$desiredResult" "$output"
}

fn_check() {
    local desiredResult="$1"
    local output="$2"
    local numMatches=$(echo "$desiredResult" | wc -w)
    if [ "$desiredResult" == "NOMATCH" ]
    then local match="No results."
    else local match="$numMatches matches: [$desiredResult]" 
    fi

    # Replace any backspaced characters in output with nothing, test, and
    # print debug information if failure.
    if [ "$(echo $output | sed -e 's/.//')" != "$match" ]; then
        echo -e "Output:\t$output"
        echo -e "Expected:\t$match"
        false
    fi
}

@test "dr find numeric - test of shell globbing patterns & ranges" {
    # the simplest kind
    fn_test "5" 5
    fn_test "1, 2, 3" 1 2 3
    # normal
    fn_test "1, 2, 3, 4, 5" '0000[12345]'
    fn_test "1, 2, 3, 4, 5" '0000[1-5]'
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" '0000*'
    # if we forget to quote...
    fn_test "1, 2, 3, 4, 5" 0000[12345]
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" 0000*
    # and how about with the extension
    fn_test "1, 2, 3, 4, 5" '0000[12345].dre'
    fn_test "1, 2, 3, 4, 5" 0000[12345].dre
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" '0000*.dre'
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" 0000*.dre
    # and something wacky
    fn_test "1, 2" '[025]*0[12]'
    fn_test "1, 2" [025]*0[12].dre
    fn_test "1, 2" [025]*0[12]
    # ranges
    fn_test "1, 2, 3" 1-3
    fn_test "1, 2, 3" 00001-00003
    fn_test "8, 9" 8-
    fn_test "1, 2, 3, 4" -4
    fn_test "1, 2, 3, 4" -00004
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" -

    # NOMATCH doesn't work since we have a different error message condition
    # || true: this returns 1 and BATS will get mad if anything returns nonzero
    # Take this opportunity to test the short version of the 'find' command.
    result=$(dr f '[025]*[12]0') || true
    expected=$(cat <<-EXPECTED
	Matched nonexistent file '[025]*[12]0.dre'; please check your search terms and try again.
	(Type 'dr help search' for help.)
	EXPECTED)
    [ "$result" == "$expected" ]
}


@test "dr find tagged - test of hregexes" {
    # hregexes should match / not match on dream #8 as noted in the help page
    fn_test "8"     t Tags 'foo'
    fn_test "8"     t Tags 'bar'
    fn_test "8"     t Tags 'baz'
    fn_test "8"     t Tags 'az'
    fn_test "8"     t Tags '.*baz'
    fn_test "8"     t Tags '^ba.*az'
    fn_test "8"     t Tags '^foobar$'
    fn_test NOMATCH t Tags '^baz$'
    fn_test NOMATCH t Tags 'o, ba'
    fn_test NOMATCH t Tags 'foo.*baz'

    # some additional hregex tests
    fn_test "4, 7"    t Tags   'sex'         
    fn_test "7"       t Tags   'sexy'        
    fn_test "4"       t Tags   '^sex$'       
    fn_test "4"       t Tags   '\bsex\b'     
    fn_test "1"       t People 'Einstein'    
    fn_test "1"       t People 'Alb.*stein'
    fn_test "1, 4, 5" t Places 'Sunnyside'   
    fn_test "9"       t Lucid  1              

    fn_test "1, 4"    -l 2 t Places 'Sunnyside'

    # how about combinations of tests?
    fn_test "7, 6, 7" tagged Tags 'rel.*ship' tagged People OC
}

@test "dr find winnow - test of winnow with tagged" {
    # winnow / piping
    result=$(dr find $(dr filename-display tagged Tags 'rel.*ship' | dr winnow tagged People OC))
    fn_check "7" "$result"
    result=$(dr find $(dr filename-display tagged Tags 'rel.*ship' | dr xwinnow tagged People OC))
    fn_check "6" "$result"

    # short forms
    result=$(dr find $(dr filename-display tagged Tags 'rel.*ship' | dr w tagged People OC))
    fn_check "7" "$result"
    result=$(dr find $(dr filename-display tagged Tags 'rel.*ship' | dr x tagged People OC))
    fn_check "6" "$result"
}

@test "dr find misc - test of other search expressions" {
    fn_test "9" grep "extra lucid text"
    fn_test "6" back 4
    fn_test "6, 7, 8, 9" last 4
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" all
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" ""
    # this leaves 'random': there's no good way to test that!

    # short forms of the above
    fn_test "9" g "extra lucid text"
    fn_test "6" b 4
    fn_test "6, 7, 8, 9" l 4
    fn_test "1, 2, 3, 4, 5, 6, 7, 8, 9" a

    # combining optional-arg versions of these with other text (commit 2f648401)
    fn_test "9, 6" back 1 tagged People MN
    fn_test "9, 6" back tagged People MN
}

@test "dr find options - test of -vrsl options to search expressions" {
    fn_test "6, 9" -r back 1 tagged People MN
    fn_test "2, 3" -v 1 4-
    fn_test "1, 2, 3" -l 3 all
    # again, no good way to test -s (randomize order)
}

@test "dr act - test finishing a pipeline with act" {
    result=$(dr filename-display tagged Tags 'rel.*ship' | dr winnow tagged People OC | dr act find)
    fn_check "7" "$result"
    # regression test against actions that take arguments
    result=$(dr filename-display tagged Tags school | dr winnow tagged Places VHS | dr act get-header People)
    [ "$result" == "MN, OC, TML" ]
}

@test "dr cat - print specified dreams on stdout" {
    run dr cat 4
    expected=$(echo -e "$(cat 00004.dre)\n\n")
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]

    run dr c 0000[48]
    # 3x '\n': bash seems to automatically strip one of them
    expected=$(echo -e "$(cat 00004.dre)\n\n\n$(cat 00008.dre)\n\n")
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]
}

@test "dr dump-headers - print specified dream headers on stdout" {
	expected=$(cat <<-EXPECTED
	Id:	00004
	Date:	2011-05-06
	People:	Q
	Places:	Sunnyside
	Tags:	sex
	
	Id:	00008
	Date:	2011-05-08
	People:	M
	Tags:	foo, bar baz, foobar
	
	EXPECTED)
    run dr dump-headers 0000[48]
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]
    run dr dh 0000[48]
    [ "$status" == 0 ]
    [ "$output" == "$expected" ]
}

@test "dr edit - edit specified dream files" {
    # try making a small change with 'ed'
    expected=$(echo -e "4d3\n< pq")

    cp 00005.dre save.dre
    echo -e "4\ni\npq\n.\nwq\n" | EDITOR='ed' dr edit 5
    run diff 00005.dre save.dre 
    mv save.dre 00005.dre
    [ "$status" == 1 ]
    [ "$output" == "$expected" ]

    # short version
    cp 00005.dre save.dre
    echo -e "4\ni\npq\n.\nwq\n" | EDITOR='ed' dr e 5
    run diff 00005.dre save.dre 
    mv save.dre 00005.dre
    [ "$status" == 1 ]
    [ "$output" == "$expected" ]
}

@test "dr filename-display - show matching filenames" {
    expected="00002.dre 00004.dre 00005.dre"
    run dr filename-display 2 4-5
    [ "$output" == "$expected" ]
    run dr fd 2 4-5
    [ "$output" == "$expected" ]
}

@test "dr get-header - print values of one header for specified dreams" {
	expected=$(cat <<-EXPECTED
	1: Albert Einstein
	4: Q
	EXPECTED)
	# There is nothing for 5, because it doesn't have a People header at all;
	# we might want to change this behavior later, but it's considered correct
	# for now.
	run dr get-header People 1 4 5
	[ "$output" == "$expected" ]
	run dr gh People 1 4 5
	[ "$output" == "$expected" ]
	# regression test: works correctly with null search-expr
	expected=$(cat <<-EXPECTED
	1: Albert Einstein
	4: Q
	6: MN, OC, TML
	7: OC
	8: M
	EXPECTED)
	run dr get-header People
	[ "$status" == 0 ]
	[ "$output" == "$expected" ]
}

@test "dr header-values - print values used for a header in specified dreams" {
	run dr header-values Places
	expected=$(cat <<-EXPECTED
	Sunnyside
	VHS
	EXPECTED)
	[ "$output" == "$expected" ]

	run dr hv -f Places
	expected=$(cat <<-EXPECTED
	      3 Sunnyside
	      1 VHS
	EXPECTED)
	[ "$output" == "$expected" ]

	run dr header-values -f Places 1 6-
	expected=$(cat <<-EXPECTED
	      1 Sunnyside
	      1 VHS
	EXPECTED)
	[ "$output" == "$expected" ]
}

@test "dr list-headers - show all headers used in specified dreams" {
	run dr list-headers
	expected=$'Date\nId\nLucid\nPeople\nPlaces\nTags'
	[ "$output" == "$expected" ]

	run dr lh 1-8
	expected=$'Date\nId\nPeople\nPlaces\nTags'
	[ "$output" == "$expected" ]
}

@test "dr word-count - count different kinds of words in specified dreams" {
	expected=$(cat <<-EXPECTED
	
	~ 00001.dre ~
	Normal:	9
	Lucid:	0
	Notes:	0
	Total:	9

	~ 00009.dre ~
	Normal:	9
	Lucid:	6
	Notes:	5
	Total:	20

	~ total ~
	Normal:	18
	Lucid:	6
	Notes:	5
	Total:	29
	EXPECTED)
	run dr word-count 1 last
	[ "$output" == "$expected" ]
	run dr wc 1 last
	[ "$output" == "$expected" ]
}

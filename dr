#!/bin/bash

# usagemsg()
# Print the usage/help message and exit with status 0.
usagemsg() {
    cat <<USAGEMSG
dr - Dreamdir utility program
Copyright (c) 2015-2016 Soren Bjornstad.
Usage: $0 <action> [<action arguments>]

Available actions:
help                           :: show this usage message
new                            :: create a new dream with the next available ID
                                  number and open it in \$EDITOR
random                         :: show a random dream
validate                       :: format sanity check: ensure all dreams have IDs
                                  and dates and ID numbers are contiguous
find-tagged <header> [<value>] :: list dreams matching search
open-tagged <header> [<value>] :: pass dreams matching search as args to \$EDITOR
show-headers                   :: list headers used in at least one dream
header-list <header>           :: show a list of all values used for <header> in
                                  any dream
USAGEMSG
    exit 0
}

# ensure()
# Make sure a condition necessary for script execution is true.
#
# Arguments:
#     $1 - an argument to `test`
#     $2 - a message to display if the test fails
#	  $3 - (optional, default 1) exit status to return if the test fails
# State change & return:
#     If the test evaluates non-zero, the script prints $2 and exits with
#     status $3 (or 1). Else, control returns to the caller.
ensure() {
    eval "test $1"
    if [ $? -ne 0 ]
    then
        if [ -z "$3" ]; then
            exitval=1
        else
            exitval=$3
        fi
        echo $2
        exit $exitval
    else
        return 0
    fi
}


##### Begin main script #####

# If DREAMDIR environment variable is set and we're not already in $DREAMDIR,
# change directory into it until the end of the operation.
didpush=0
if [[ ! -z "$DREAMDIR" && "$PWD" != "$DREAMDIR" && ! -d scripts && \
      ! -d graphs && ! -f dr ]]; then
    if [[ -d "$DREAMDIR" ]]; then
        pushd "$DREAMDIR" > /dev/null
        didpush=1
    else
        echo "DREAMDIR environment variable is set to an invalid directory"
        echo "($DREAMDIR). Exiting."
        exit 1
    fi
fi

# Confirm that we've ended up in a dreamdir.
error="Please run this script from the dreamdir root directory, or set the "\
"environment variable \$DREAMDIR to the path to your dreamdir."
ensure '-d scripts' "$error"
ensure '-d graphs'  "$error"
ensure '-f dr'      "$error"

# Do the appropriate action.
[ -z "$1" ] && usagemsg
case "$1" in
"new")
    today=$(date '+%Y-%m-%d')
    lastNum=$(ls *.dre | sort | tail -n 1 | cut -c 1-5)
    let newNum=10#$lastNum+1
    printf -v newNum '%05d' "$newNum"
    echo -e "Id:\t$newNum"   > $newNum.dre
    echo -e "Date:\t$today" >> $newNum.dre
    echo -e "Time:\t"       >> $newNum.dre
    echo -e "Tags:\t"       >> $newNum.dre
    echo -e "\n"            >> $newNum.dre
    cp $newNum.dre /tmp
    if [ "$EDITOR" == "vim" ]; then
        vim $newNum.dre +
    else
        "$EDITOR" $newNum.dre
    fi
    diff /tmp/$newNum.dre $newNum.dre > /dev/null 2>&1
    if [ $? == 0 ]; then
        echo "Deleting unmodified dreamfile."
        rm $newNum.dre
    fi
    rm /tmp/$newNum.dre
    ;;

"show-headers")
    grep -h '^.*: ' *.dre | sed -e 's/^\(.*\):    .*$/\1/' | sort | uniq ;;

"header-list")
    ensure "! -z \"$2\"" "Please specify a header type, like './dr header-list Tags'."
    grep "$2:	" *.dre | cut -d ':' -f 3 | cut -c 2- | sed -e 's/, /\n/g' | sort | uniq
    ;;

"random")
    cat $(ls -1 *.dre | shuf | head -n 1) ;;

"validate")
    # set up temp file for checking id and date headers
    tempfile="/tmp/dreamgrep" # contains list of dream files
    ensure "! -e $tempfile" "Please check & remove existing temp file $tempfile and try again."
    ls *.dre | sort > "$tempfile"

    # check for id problems
    checkFailedFor=$(grep -l 'Id:	' *.dre | sort | diff - "$tempfile")
    if [ $? == 0 ]; then
        echo "ID value check...OK"
    else
        echo "ID value check...FAIL"
        echo "The files listed in the following diff are missing Id headers."
        echo "$checkFailedFor"
        rm "$tempfile"
        exit 1
    fi

    # check for date problems (similar -- consider a function)
    checkFailedFor=$(grep -l 'Date:	' *.dre | sort | diff - "$tempfile")
    if [ $? == 0 ]; then
        echo "Date check...OK"
    else
        echo "Date check...FAIL"
        echo "The files listed in the following diff are missing Date headers."
        echo "$checkFailedFor"
        rm "$tempfile"
        exit 1
    fi
    rm "$tempfile"

    # check for ID continuity
    # works with Python 2 & 3 -- check dual compatibility after changes
    python <<PYTH_ID_CHECK
import subprocess, sys
listing = subprocess.check_output(["ls"]).decode('utf-8').split('.dre\n')
nums = []
for i in listing:
    try:
        nums.append(int(i))
    except ValueError:
        # not a dream file, but auxiliary of some kind
        continue

lastnum = 0
for i in nums:
    if i != lastnum+1:
        print("ID continuity check...FAIL")
        print("Failure was on ID %i, not continuous with previous ID %i." % (
              i, lastnum))
        sys.exit(1)
    else:
        lastnum = i
print("ID continuity check...OK")
sys.exit(0)
PYTH_ID_CHECK
    if [ $? != 0 ]; then
        exit 1
    fi

    echo "All tests succeeded."
    ;;

"find-tagged")
    ensure "! -z \"$2\"" "Usage: $0 find-tagged <header> [<value>]."
    header="$2"
    shift; shift
    python2 <<PYTH_FINDTAGGED
import scripts.ddirparse as dp
dreams = dp.getDreamsTagged("$header", "$@")
print "%i matches: %r" % (len(dreams), dreams)
PYTH_FINDTAGGED
    ;;

"open-tagged")
    # Do a find using the same method as find-tagged but then open those files
    # for editing rather than just showing a list of the numbers.
    tempfile="/tmp/dreamsearch"
    ensure "! -e $tempfile" "Please check & remove existing temp file $tempfile and try again."
    header="$2"
    shift; shift # value to search for remains in args

    python2 <<PYTH_SHOWTAGGED
import scripts.ddirparse as dp
dreams = dp.getDreamsTagged("$header", "$@")
dreamStr = '.dre '.join([("%05i" % i) for i in dreams]) + '.dre'
with open("$tempfile", "w") as f:
    f.write(dreamStr)
PYTH_SHOWTAGGED
    args=$(cat "$tempfile")

    if [ "$args" == ".dre" ]; then
        echo "Sorry, no results for that query."
        rm "$tempfile"
        exit 1
    else
        "$EDITOR" $args
        rm "$tempfile"
    fi
    ;;

"help"|"--help"|*)
    usagemsg ;;
esac

[[ $didpush == 1 ]] && popd > /dev/null
exit 0
